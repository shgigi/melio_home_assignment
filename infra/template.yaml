AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'infra

  '
Globals:
  Function:
    Timeout: 30
    LoggingConfig:
      LogFormat: JSON
Resources:
  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PostRdsClusterQueue
    Metadata:
      SamResourceId: SqsQueue
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - !Ref SqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowApiGatewayPost
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
          Action:
          - sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - SqsQueue
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/Prod/POST
        - Sid: AllowLambdaFunction
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - SqsQueue
            - Arn
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:ChangeMessageVisibility
    Metadata:
      SamResourceId: QueuePolicy
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: CreateRdsCluster
      Description: 'Provides developers with a method to create

        RDS clusters on-demand.

        '
      ApiKeySourceType: HEADER
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: 'Usage plan for RDSCluster

            '
          Quota:
            Limit: 50
            Period: DAY
          Throttle:
            BurstLimit: 2
            RateLimit: 1
      DefinitionBody:
        swagger: '2.0'
        info:
          title: API Gateway - Developer Platform
          version: 1.0
          description: 'This API Gateway enables developers to create

            different AWS resources on-demand and without

            manual work or interventions.

            '
        paths:
          /rdscluster:
            post:
              tags:
              - rdsCluster
              summary: Create an RDS cluster
              operationId: postRdsCluster
              parameters:
              - in: body
                name: body
                description: Create an RDS cluster
                required: true
                schema:
                  $ref: '#/definitions/RdsCluster'
              responses:
                '200':
                  description: Successful operation
              x-amazon-apigateway-request-validator: ValidateBody
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                passthroughBehavior: NEVER
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${SqsQueue.QueueName}
                credentials:
                  Fn::GetAtt: ApiGatewaySqsRole.Arn
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                requestTemplates:
                  application/json: Action=SendMessage&MessageBody=$input.body
                responses:
                  default:
                    statusCode: '200'
        definitions:
          RdsCluster:
            type: object
            required:
            - DatabaseName
            - DatabaseEngine
            - Environment
            properties:
              DatabaseName:
                type: string
                pattern: ^[a-zA-Z0-9-]+$
              DatabaseEngine:
                type: string
                enum:
                - MySQL
                - PostgreSQL
              Environment:
                type: string
                enum:
                - Prod
                - Dev
        x-amazon-apigateway-request-validators:
            ValidateBody:
              validateRequestBody: true
              validateRequestParameters: false
      Models:
        RdsCluster:
          $schema: http://json-schema.org/draft-04/schema#
          title: CreateRdsCluster
          type: object
          required:
          - DatabaseName
          - DatabaseEngine
          - Environment
          properties:
            DatabaseName:
              type: string
            DatabaseEngine:
              type: string
              enum:
              - MySQL
              - PostgreSQL
            Environment:
              type: string
              enum:
              - Prod
              - Dev
      StageName: Prod
      TracingEnabled: false
    Metadata:
      SamResourceId: ApiGateway
  ApiGatewaySqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewaySQSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
              Fn::GetAtt: SqsQueue.Arn
    Metadata:
      SamResourceId: ApiGatewaySqsRole
  LambdaConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Layers: 
        - !Ref PythonLayer
      Handler: handler.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Environment:
        Variables:
          QUEUE_URL: !GetAtt SqsQueue.QueueUrl
          GITHUB_TOKEN: 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
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !GetAtt SqsQueue.Arn
            BatchSize: 1
    Metadata:
      SamResourceId: LambdaConsumer
  PythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
      - x86_64
      CompatibleRuntimes:
      - python3.12
      ContentUri: src/layer
      Description: 'Provides the lambda functions with required packages'
      RetentionPolicy: Delete
    Metadata:
      SamResourceId: PythonLayer
Outputs:
  ApiGateway:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/rdscluster/
